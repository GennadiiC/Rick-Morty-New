{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const getSpeciesAsync = createAsyncThunk('displaySpecies/fetchSpecies', async payload => {\n  const response = await fetch(`https://rickandmortyapi.com/api/character/?page=${payload.page}&${payload.filter}=${payload.name}`);\n  let result = response.json();\n  return result;\n});\nexport const getAllEpisodesAsync = createAsyncThunk('displayAllEpisodes/fetchAllEpisodes', async payload => {\n  const pages = new Array(3).fill().map((p, i) => p = i + 1);\n  const results = await Promise.all(pages.map(page => fetch(`https://rickandmortyapi.com/api/episode?page=${page}`).then(data => data.json()) // .then(res => [].concat(...res.map(res => res.results)))\n  ));\n  return results;\n});\nconst rickMortySlice = createSlice({\n  name: 'rickMorty',\n  initialState: {\n    page: 1,\n    filter: '',\n    name: '',\n    users: [],\n    displaySpecies: null,\n    displayAllEpisodes: null,\n    filteredFetchingStatus: 'idle',\n    error: null\n  },\n  reducers: {\n    setFilter: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.filter = payload.filter;\n      state.name = payload.name;\n    },\n    flipPage: (state, action) => {\n      state.page = state.page += action.payload;\n    },\n    addUser: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      const user = {\n        isLogged: payload.isLogged,\n        name: payload.userName,\n        userID: payload.userID,\n        userEmail: payload.userEmail,\n        userPicture: payload.userPicture,\n        likedCharacters: []\n      };\n      state.users.push(user);\n    },\n    likedChar: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      const char = {\n        id: payload.id,\n        name: payload.name,\n        image: payload.image,\n        species: payload.species,\n        gender: payload.gender,\n        location: payload.location,\n        status: payload.status,\n        episode: payload.episode,\n        created: payload.created,\n        episodes: payload.episodes,\n        title: payload.title,\n        series: payload.series\n      };\n      let user = state.users.find(usr => usr.isLogged === true);\n      let eqID = user.likedCharacters.find(chr => chr.id === payload.id);\n\n      if (!eqID) {\n        user.likedCharacters.push(char);\n      }\n    },\n    disLikedChar: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      let user = state.users.find(usr => usr.isLogged === true);\n      user.likedCharacters = user.likedCharacters.filter(char => char.id !== payload.charID);\n    },\n    logOut: (state, action) => {\n      let user = state.users.find(usr => usr.isLogged === true);\n      user.isLogged = false;\n    }\n  },\n\n  extraReducers(builder) {\n    builder // getSpeciesAsync cases\n    .addCase(getSpeciesAsync.pending, (state, action) => {\n      state.filteredFetchingStatus = 'loading';\n    }).addCase(getSpeciesAsync.fulfilled, (state, action) => {\n      state.filteredFetchingStatus = 'succeeded';\n      state.displaySpecies = action.payload;\n    }).addCase(getSpeciesAsync.rejected, (state, action) => {\n      state.filteredFetchingStatus = 'failed';\n      state.error = action.error.message;\n    }) // getAllEpisodes cases\n    .addCase(getAllEpisodesAsync.fulfilled, (state, action) => {\n      state.displayAllEpisodes = action.payload;\n    });\n  }\n\n});\nexport const {\n  flipPage,\n  addUser,\n  likedChar,\n  disLikedChar,\n  filterChar,\n  setFilter\n} = rickMortySlice.actions;\nexport default rickMortySlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getSpeciesAsync","payload","response","fetch","page","filter","name","result","json","getAllEpisodesAsync","pages","Array","fill","map","p","i","results","Promise","all","then","data","rickMortySlice","initialState","users","displaySpecies","displayAllEpisodes","filteredFetchingStatus","error","reducers","setFilter","state","flipPage","action","addUser","user","isLogged","userName","userID","userEmail","userPicture","likedCharacters","push","likedChar","char","id","image","species","gender","location","status","episode","created","episodes","title","series","find","usr","eqID","chr","disLikedChar","charID","logOut","extraReducers","builder","addCase","pending","fulfilled","rejected","message","filterChar","actions","reducer"],"sources":["/Users/g/Documents/myCodeProjects/rick-morty-new/src/redux/rickMortySlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const getSpeciesAsync = createAsyncThunk(\n  'displaySpecies/fetchSpecies', \n  async (payload) => {\n    const response = await fetch(\n      `https://rickandmortyapi.com/api/character/?page=${payload.page}&${payload.filter}=${payload.name}`\n    )\n    let result = response.json()\n    return result\n  }\n)\n\nexport const getAllEpisodesAsync = createAsyncThunk(\n  'displayAllEpisodes/fetchAllEpisodes',\n  async (payload) => {\n    const pages = new Array(3)\n      .fill()\n      .map((p, i) => p = i + 1)\n    const results = await Promise.all(\n      pages.map(page => \n        fetch(`https://rickandmortyapi.com/api/episode?page=${page}`)\n          .then(data => data.json())\n          // .then(res => [].concat(...res.map(res => res.results)))\n      )\n    )\n    return results\n  }\n)\n\nconst rickMortySlice = createSlice({\n  name: 'rickMorty',\n  initialState: {\n    page: 1,\n    filter: '',\n    name: '',\n    users: [],\n    displaySpecies: null,\n    displayAllEpisodes: null,\n    filteredFetchingStatus: 'idle',\n    error: null\n  },\n  reducers: {\n    setFilter: (state, { payload }) => {\n      state.filter = payload.filter\n      state.name = payload.name\n    },\n    flipPage: (state, action) => {\n      state.page = state.page += action.payload\n    },\n    addUser: (state, { payload }) => {\n      const user = {\n        isLogged: payload.isLogged,\n        name: payload.userName,\n        userID: payload.userID,\n        userEmail: payload.userEmail,\n        userPicture: payload.userPicture,\n        likedCharacters: []\n      }\n      state.users.push(user)\n    },\n    likedChar: (state, { payload }) => {\n      const char = { \n        id: payload.id,\n        name: payload.name, \n        image: payload.image,\n        species: payload.species,\n        gender: payload.gender,\n        location: payload.location, \n        status: payload.status,\n        episode: payload.episode,\n        created: payload.created,  \n        episodes: payload.episodes,\n        title: payload.title,\n        series: payload.series\n      }\n      let user = state.users.find(usr => usr.isLogged === true)\n      let eqID = user.likedCharacters.find(chr => chr.id === payload.id)\n      if (!eqID) {\n        user.likedCharacters.push(char)\n      }\n    \n    },\n    disLikedChar: (state, {payload}) => {\n      let user = state.users.find(usr => usr.isLogged === true)\n      user.likedCharacters = user.likedCharacters.filter(char => char.id !== payload.charID)\n    },\n    logOut: (state, action) => {\n      let user = state.users.find(usr => usr.isLogged === true)\n      user.isLogged = false\n    }\n  },\n  extraReducers(builder) {\n    builder\n      // getSpeciesAsync cases\n      .addCase(getSpeciesAsync.pending, (state, action) => {\n        state.filteredFetchingStatus = 'loading'\n      })\n      .addCase(getSpeciesAsync.fulfilled, (state, action) => {\n        state.filteredFetchingStatus = 'succeeded'\n        state.displaySpecies = action.payload\n      })\n      .addCase(getSpeciesAsync.rejected, (state, action) => {\n        state.filteredFetchingStatus = 'failed'\n        state.error = action.error.message\n      })\n      // getAllEpisodes cases\n      .addCase(getAllEpisodesAsync.fulfilled, (state, action) => {\n        state.displayAllEpisodes = action.payload\n      })\n  }\n})\n\nexport const { \n  flipPage, \n  addUser, \n  likedChar, \n  disLikedChar, \n  filterChar,\n  setFilter\n} = rickMortySlice.actions;\n\n\nexport default rickMortySlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}