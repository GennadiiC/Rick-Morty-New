{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const getSpeciesAsync = createAsyncThunk('displaySpecies/fetchSpecies', async payload => {\n  const response = await fetch(`https://rickandmortyapi.com/api/character/?page=${payload.page}&${payload.filter}=${payload.name}`);\n  let result = response.json();\n  return result;\n});\n\nconst getAllAsync = async payload => {\n  const pages = new Array(payload.count).fill().map((p, i) => p = i + 1);\n  const results = await Promise.all(pages.map(page => fetch(`https://rickandmortyapi.com/api/${payload.query}?page=${page}`).then(data => data.json())));\n  let mapped = results.map(res => res.results).flat();\n  return {\n    result: mapped,\n    query: payload.query\n  };\n}; // const getAllAsync = createAsyncThunk(\n//   'displayAll/fetchAll',\n//   async (payload) => {\n//     const pages = new Array(payload.count)\n//       .fill()\n//       .map((p, i) => p = i + 1)\n//     const results = await Promise.all(\n//       pages.map(page => \n//         fetch(`https://rickandmortyapi.com/api/${payload.query}?page=${page}`)\n//           .then(data => data.json())\n//       )\n//     )\n//     let mapped = results.map(res => res.results).flat()\n//     return { result: mapped, query: payload.query }\n//   } \n// )\n\n\nexport const getAllCharactersAsync = createAsyncThunk('displayAllCharacters/fetchAllCharacters', getAllAsync({\n  query: 'character',\n  count: 42\n}));\nexport const getAllEpisodesAsync = createAsyncThunk('displayAllEpisodes/fetchAllEpisodes', getAllAsync({\n  query: 'episode',\n  count: 3\n}));\nconst rickMortySlice = createSlice({\n  name: 'rickMorty',\n  initialState: {\n    page: 1,\n    filter: '',\n    name: '',\n    users: [],\n    displaySpecies: null,\n    displayAllEpisodes: null,\n    displayAllCharacters: null,\n    speciesStatus: 'idle',\n    allEpisodesStatus: 'idle',\n    allCharactersStatus: 'idle',\n    speciesError: null,\n    allEpisodesError: null,\n    allCharactersError: null\n  },\n  reducers: {\n    setFilter: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.filter = payload.filter;\n      state.name = payload.name;\n    },\n    flipPage: (state, action) => {\n      state.page = state.page += action.payload;\n    },\n    addUser: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      const user = {\n        isLogged: payload.isLogged,\n        name: payload.userName,\n        userID: payload.userID,\n        userEmail: payload.userEmail,\n        userPicture: payload.userPicture,\n        likedCharacters: []\n      };\n      state.users.push(user);\n    },\n    likedChar: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      const char = {\n        id: payload.id,\n        name: payload.name,\n        image: payload.image,\n        species: payload.species,\n        gender: payload.gender,\n        location: payload.location,\n        status: payload.status,\n        episode: payload.episode,\n        created: payload.created,\n        episodes: payload.episodes,\n        title: payload.title,\n        series: payload.series\n      };\n      let user = state.users.find(usr => usr.isLogged === true);\n      let eqID = user.likedCharacters.find(chr => chr.id === payload.id);\n\n      if (!eqID) {\n        user.likedCharacters.push(char);\n      }\n    },\n    disLikedChar: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      let user = state.users.find(usr => usr.isLogged === true);\n      user.likedCharacters = user.likedCharacters.filter(char => char.id !== payload.charID);\n    },\n    logOut: (state, action) => {\n      let user = state.users.find(usr => usr.isLogged === true);\n      user.isLogged = false;\n    }\n  },\n\n  extraReducers(builder) {\n    builder // getSpeciesAsync cases\n    .addCase(getSpeciesAsync.pending, (state, action) => {\n      state.speciesStatus = 'loading';\n    }).addCase(getSpeciesAsync.fulfilled, (state, action) => {\n      state.speciesStatus = 'succeeded';\n      state.displaySpecies = action.payload;\n    }).addCase(getSpeciesAsync.rejected, (state, action) => {\n      state.speciesStatus = 'failed';\n      state.speciesError = action.error.message;\n    }) // getAll cases\n    // .addCase(getAllAsync.fulfilled, (state, { payload }) => {\n    //   if (payload.query === 'episode') {\n    //     state.allEpisodesStatus = 'succeeded'\n    //     state.displayAllEpisodes = payload.result\n    //   } else if (payload.query === 'character') {\n    //     state.allCharactersStatus = 'succeeded'\n    //     state.displayAllCharacters = payload.result\n    //   }\n    // })\n    .addCase(getAllCharactersAsync.fulfilled, (state, _ref5) => {\n      let {\n        payload\n      } = _ref5;\n      state.allCharactersStatus = 'succeeded';\n      state.displayAllCharacters = payload.result;\n    }).addCase(getAllEpisodesAsync.fulfilled, (state, _ref6) => {\n      let {\n        payload\n      } = _ref6;\n      state.allEpisodesStatus = 'succeeded';\n      state.displayAllEpisodes = payload.result;\n    }); // .addCase(getAllAsync.rejected, (state, action) => {\n    //   if (action.payload.query === 'episode') {\n    //     state.allEpisodesStatus = 'failed'\n    //     state.allEpisodesError = action.error.message\n    //   } else if (action.payload.query === 'character') {\n    //     state.allCharactersStatus = 'failed'\n    //     state.allCharactersError = action.error.message\n    //   }\n    // })\n  }\n\n});\nexport const {\n  flipPage,\n  addUser,\n  likedChar,\n  disLikedChar,\n  filterChar,\n  setFilter\n} = rickMortySlice.actions;\nexport default rickMortySlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getSpeciesAsync","payload","response","fetch","page","filter","name","result","json","getAllAsync","pages","Array","count","fill","map","p","i","results","Promise","all","query","then","data","mapped","res","flat","getAllCharactersAsync","getAllEpisodesAsync","rickMortySlice","initialState","users","displaySpecies","displayAllEpisodes","displayAllCharacters","speciesStatus","allEpisodesStatus","allCharactersStatus","speciesError","allEpisodesError","allCharactersError","reducers","setFilter","state","flipPage","action","addUser","user","isLogged","userName","userID","userEmail","userPicture","likedCharacters","push","likedChar","char","id","image","species","gender","location","status","episode","created","episodes","title","series","find","usr","eqID","chr","disLikedChar","charID","logOut","extraReducers","builder","addCase","pending","fulfilled","rejected","error","message","filterChar","actions","reducer"],"sources":["/Users/g/Documents/myCodeProjects/rick-morty-new/src/redux/rickMortySlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const getSpeciesAsync = createAsyncThunk(\n  'displaySpecies/fetchSpecies', \n  async (payload) => {\n    const response = await fetch(\n      `https://rickandmortyapi.com/api/character/?page=${payload.page}&${payload.filter}=${payload.name}`\n    )\n    let result = response.json()\n    return result\n  }\n)\n\nconst getAllAsync = async (payload) => {\n  const pages = new Array(payload.count)\n      .fill()\n      .map((p, i) => p = i + 1)\n    const results = await Promise.all(\n      pages.map(page => \n        fetch(`https://rickandmortyapi.com/api/${payload.query}?page=${page}`)\n          .then(data => data.json())\n      )\n    )\n    let mapped = results.map(res => res.results).flat()\n    return { result: mapped, query: payload.query }\n}\n\n// const getAllAsync = createAsyncThunk(\n//   'displayAll/fetchAll',\n//   async (payload) => {\n//     const pages = new Array(payload.count)\n//       .fill()\n//       .map((p, i) => p = i + 1)\n//     const results = await Promise.all(\n//       pages.map(page => \n//         fetch(`https://rickandmortyapi.com/api/${payload.query}?page=${page}`)\n//           .then(data => data.json())\n//       )\n//     )\n//     let mapped = results.map(res => res.results).flat()\n//     return { result: mapped, query: payload.query }\n//   } \n// )\n\nexport const getAllCharactersAsync = createAsyncThunk(\n  'displayAllCharacters/fetchAllCharacters',\n  getAllAsync({ query: 'character', count: 42 })\n)\n\nexport const getAllEpisodesAsync = createAsyncThunk(\n  'displayAllEpisodes/fetchAllEpisodes',\n  getAllAsync({ query: 'episode', count: 3 })\n)\n\n\n\nconst rickMortySlice = createSlice({\n  name: 'rickMorty',\n  initialState: {\n    page: 1,\n    filter: '',\n    name: '',\n    users: [],\n    displaySpecies: null,\n    displayAllEpisodes: null,\n    displayAllCharacters: null,\n    speciesStatus: 'idle',\n    allEpisodesStatus: 'idle',\n    allCharactersStatus: 'idle',\n    speciesError: null,\n    allEpisodesError: null,\n    allCharactersError: null\n  },\n  reducers: {\n    setFilter: (state, { payload }) => {\n      state.filter = payload.filter\n      state.name = payload.name\n    },\n    flipPage: (state, action) => {\n      state.page = state.page += action.payload\n    },\n    addUser: (state, { payload }) => {\n      const user = {\n        isLogged: payload.isLogged,\n        name: payload.userName,\n        userID: payload.userID,\n        userEmail: payload.userEmail,\n        userPicture: payload.userPicture,\n        likedCharacters: []\n      }\n      state.users.push(user)\n    },\n    likedChar: (state, { payload }) => {\n      const char = { \n        id: payload.id,\n        name: payload.name, \n        image: payload.image,\n        species: payload.species,\n        gender: payload.gender,\n        location: payload.location, \n        status: payload.status,\n        episode: payload.episode,\n        created: payload.created,  \n        episodes: payload.episodes,\n        title: payload.title,\n        series: payload.series\n      }\n      let user = state.users.find(usr => usr.isLogged === true)\n      let eqID = user.likedCharacters.find(chr => chr.id === payload.id)\n      if (!eqID) {\n        user.likedCharacters.push(char)\n      }\n    \n    },\n    disLikedChar: (state, {payload}) => {\n      let user = state.users.find(usr => usr.isLogged === true)\n      user.likedCharacters = user.likedCharacters.filter(char => char.id !== payload.charID)\n    },\n    logOut: (state, action) => {\n      let user = state.users.find(usr => usr.isLogged === true)\n      user.isLogged = false\n    }\n  },\n  extraReducers(builder) {\n    builder\n      // getSpeciesAsync cases\n      .addCase(getSpeciesAsync.pending, (state, action) => {\n        state.speciesStatus = 'loading'\n      })\n      .addCase(getSpeciesAsync.fulfilled, (state, action) => {\n        state.speciesStatus = 'succeeded'\n        state.displaySpecies = action.payload\n      })\n      .addCase(getSpeciesAsync.rejected, (state, action) => {\n        state.speciesStatus = 'failed'\n        state.speciesError = action.error.message\n      })\n      // getAll cases\n      // .addCase(getAllAsync.fulfilled, (state, { payload }) => {\n      //   if (payload.query === 'episode') {\n      //     state.allEpisodesStatus = 'succeeded'\n      //     state.displayAllEpisodes = payload.result\n      //   } else if (payload.query === 'character') {\n      //     state.allCharactersStatus = 'succeeded'\n      //     state.displayAllCharacters = payload.result\n      //   }\n      // })\n      .addCase(getAllCharactersAsync.fulfilled, (state, { payload }) => {\n        state.allCharactersStatus = 'succeeded'\n        state.displayAllCharacters = payload.result\n      })\n      .addCase(getAllEpisodesAsync.fulfilled, (state, { payload }) => {\n        state.allEpisodesStatus = 'succeeded'\n        state.displayAllEpisodes = payload.result\n      })\n      // .addCase(getAllAsync.rejected, (state, action) => {\n      //   if (action.payload.query === 'episode') {\n      //     state.allEpisodesStatus = 'failed'\n      //     state.allEpisodesError = action.error.message\n      //   } else if (action.payload.query === 'character') {\n      //     state.allCharactersStatus = 'failed'\n      //     state.allCharactersError = action.error.message\n      //   }\n      // })\n  }\n})\n\nexport const { \n  flipPage, \n  addUser, \n  likedChar, \n  disLikedChar, \n  filterChar,\n  setFilter\n} = rickMortySlice.actions;\n\n\nexport default rickMortySlice.reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,eAAe,GAAGD,gBAAgB,CAC7C,6BAD6C,EAE7C,MAAOE,OAAP,IAAmB;EACjB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,mDAAkDF,OAAO,CAACG,IAAK,IAAGH,OAAO,CAACI,MAAO,IAAGJ,OAAO,CAACK,IAAK,EADxE,CAA5B;EAGA,IAAIC,MAAM,GAAGL,QAAQ,CAACM,IAAT,EAAb;EACA,OAAOD,MAAP;AACD,CAR4C,CAAxC;;AAWP,MAAME,WAAW,GAAG,MAAOR,OAAP,IAAmB;EACrC,MAAMS,KAAK,GAAG,IAAIC,KAAJ,CAAUV,OAAO,CAACW,KAAlB,EACTC,IADS,GAETC,GAFS,CAEL,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAC,GAAG,CAFb,CAAd;EAGE,MAAMC,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAR,CACpBT,KAAK,CAACI,GAAN,CAAUV,IAAI,IACZD,KAAK,CAAE,mCAAkCF,OAAO,CAACmB,KAAM,SAAQhB,IAAK,EAA/D,CAAL,CACGiB,IADH,CACQC,IAAI,IAAIA,IAAI,CAACd,IAAL,EADhB,CADF,CADoB,CAAtB;EAMA,IAAIe,MAAM,GAAGN,OAAO,CAACH,GAAR,CAAYU,GAAG,IAAIA,GAAG,CAACP,OAAvB,EAAgCQ,IAAhC,EAAb;EACA,OAAO;IAAElB,MAAM,EAAEgB,MAAV;IAAkBH,KAAK,EAAEnB,OAAO,CAACmB;EAAjC,CAAP;AACH,CAZD,C,CAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMM,qBAAqB,GAAG3B,gBAAgB,CACnD,yCADmD,EAEnDU,WAAW,CAAC;EAAEW,KAAK,EAAE,WAAT;EAAsBR,KAAK,EAAE;AAA7B,CAAD,CAFwC,CAA9C;AAKP,OAAO,MAAMe,mBAAmB,GAAG5B,gBAAgB,CACjD,qCADiD,EAEjDU,WAAW,CAAC;EAAEW,KAAK,EAAE,SAAT;EAAoBR,KAAK,EAAE;AAA3B,CAAD,CAFsC,CAA5C;AAOP,MAAMgB,cAAc,GAAG9B,WAAW,CAAC;EACjCQ,IAAI,EAAE,WAD2B;EAEjCuB,YAAY,EAAE;IACZzB,IAAI,EAAE,CADM;IAEZC,MAAM,EAAE,EAFI;IAGZC,IAAI,EAAE,EAHM;IAIZwB,KAAK,EAAE,EAJK;IAKZC,cAAc,EAAE,IALJ;IAMZC,kBAAkB,EAAE,IANR;IAOZC,oBAAoB,EAAE,IAPV;IAQZC,aAAa,EAAE,MARH;IASZC,iBAAiB,EAAE,MATP;IAUZC,mBAAmB,EAAE,MAVT;IAWZC,YAAY,EAAE,IAXF;IAYZC,gBAAgB,EAAE,IAZN;IAaZC,kBAAkB,EAAE;EAbR,CAFmB;EAiBjCC,QAAQ,EAAE;IACRC,SAAS,EAAE,CAACC,KAAD,WAAwB;MAAA,IAAhB;QAAEzC;MAAF,CAAgB;MACjCyC,KAAK,CAACrC,MAAN,GAAeJ,OAAO,CAACI,MAAvB;MACAqC,KAAK,CAACpC,IAAN,GAAaL,OAAO,CAACK,IAArB;IACD,CAJO;IAKRqC,QAAQ,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;MAC3BF,KAAK,CAACtC,IAAN,GAAasC,KAAK,CAACtC,IAAN,IAAcwC,MAAM,CAAC3C,OAAlC;IACD,CAPO;IAQR4C,OAAO,EAAE,CAACH,KAAD,YAAwB;MAAA,IAAhB;QAAEzC;MAAF,CAAgB;MAC/B,MAAM6C,IAAI,GAAG;QACXC,QAAQ,EAAE9C,OAAO,CAAC8C,QADP;QAEXzC,IAAI,EAAEL,OAAO,CAAC+C,QAFH;QAGXC,MAAM,EAAEhD,OAAO,CAACgD,MAHL;QAIXC,SAAS,EAAEjD,OAAO,CAACiD,SAJR;QAKXC,WAAW,EAAElD,OAAO,CAACkD,WALV;QAMXC,eAAe,EAAE;MANN,CAAb;MAQAV,KAAK,CAACZ,KAAN,CAAYuB,IAAZ,CAAiBP,IAAjB;IACD,CAlBO;IAmBRQ,SAAS,EAAE,CAACZ,KAAD,YAAwB;MAAA,IAAhB;QAAEzC;MAAF,CAAgB;MACjC,MAAMsD,IAAI,GAAG;QACXC,EAAE,EAAEvD,OAAO,CAACuD,EADD;QAEXlD,IAAI,EAAEL,OAAO,CAACK,IAFH;QAGXmD,KAAK,EAAExD,OAAO,CAACwD,KAHJ;QAIXC,OAAO,EAAEzD,OAAO,CAACyD,OAJN;QAKXC,MAAM,EAAE1D,OAAO,CAAC0D,MALL;QAMXC,QAAQ,EAAE3D,OAAO,CAAC2D,QANP;QAOXC,MAAM,EAAE5D,OAAO,CAAC4D,MAPL;QAQXC,OAAO,EAAE7D,OAAO,CAAC6D,OARN;QASXC,OAAO,EAAE9D,OAAO,CAAC8D,OATN;QAUXC,QAAQ,EAAE/D,OAAO,CAAC+D,QAVP;QAWXC,KAAK,EAAEhE,OAAO,CAACgE,KAXJ;QAYXC,MAAM,EAAEjE,OAAO,CAACiE;MAZL,CAAb;MAcA,IAAIpB,IAAI,GAAGJ,KAAK,CAACZ,KAAN,CAAYqC,IAAZ,CAAiBC,GAAG,IAAIA,GAAG,CAACrB,QAAJ,KAAiB,IAAzC,CAAX;MACA,IAAIsB,IAAI,GAAGvB,IAAI,CAACM,eAAL,CAAqBe,IAArB,CAA0BG,GAAG,IAAIA,GAAG,CAACd,EAAJ,KAAWvD,OAAO,CAACuD,EAApD,CAAX;;MACA,IAAI,CAACa,IAAL,EAAW;QACTvB,IAAI,CAACM,eAAL,CAAqBC,IAArB,CAA0BE,IAA1B;MACD;IAEF,CAxCO;IAyCRgB,YAAY,EAAE,CAAC7B,KAAD,YAAsB;MAAA,IAAd;QAACzC;MAAD,CAAc;MAClC,IAAI6C,IAAI,GAAGJ,KAAK,CAACZ,KAAN,CAAYqC,IAAZ,CAAiBC,GAAG,IAAIA,GAAG,CAACrB,QAAJ,KAAiB,IAAzC,CAAX;MACAD,IAAI,CAACM,eAAL,GAAuBN,IAAI,CAACM,eAAL,CAAqB/C,MAArB,CAA4BkD,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYvD,OAAO,CAACuE,MAAxD,CAAvB;IACD,CA5CO;IA6CRC,MAAM,EAAE,CAAC/B,KAAD,EAAQE,MAAR,KAAmB;MACzB,IAAIE,IAAI,GAAGJ,KAAK,CAACZ,KAAN,CAAYqC,IAAZ,CAAiBC,GAAG,IAAIA,GAAG,CAACrB,QAAJ,KAAiB,IAAzC,CAAX;MACAD,IAAI,CAACC,QAAL,GAAgB,KAAhB;IACD;EAhDO,CAjBuB;;EAmEjC2B,aAAa,CAACC,OAAD,EAAU;IACrBA,OAAO,CACL;IADK,CAEJC,OAFH,CAEW5E,eAAe,CAAC6E,OAF3B,EAEoC,CAACnC,KAAD,EAAQE,MAAR,KAAmB;MACnDF,KAAK,CAACR,aAAN,GAAsB,SAAtB;IACD,CAJH,EAKG0C,OALH,CAKW5E,eAAe,CAAC8E,SAL3B,EAKsC,CAACpC,KAAD,EAAQE,MAAR,KAAmB;MACrDF,KAAK,CAACR,aAAN,GAAsB,WAAtB;MACAQ,KAAK,CAACX,cAAN,GAAuBa,MAAM,CAAC3C,OAA9B;IACD,CARH,EASG2E,OATH,CASW5E,eAAe,CAAC+E,QAT3B,EASqC,CAACrC,KAAD,EAAQE,MAAR,KAAmB;MACpDF,KAAK,CAACR,aAAN,GAAsB,QAAtB;MACAQ,KAAK,CAACL,YAAN,GAAqBO,MAAM,CAACoC,KAAP,CAAaC,OAAlC;IACD,CAZH,EAaE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAtBF,CAuBGL,OAvBH,CAuBWlD,qBAAqB,CAACoD,SAvBjC,EAuB4C,CAACpC,KAAD,YAAwB;MAAA,IAAhB;QAAEzC;MAAF,CAAgB;MAChEyC,KAAK,CAACN,mBAAN,GAA4B,WAA5B;MACAM,KAAK,CAACT,oBAAN,GAA6BhC,OAAO,CAACM,MAArC;IACD,CA1BH,EA2BGqE,OA3BH,CA2BWjD,mBAAmB,CAACmD,SA3B/B,EA2B0C,CAACpC,KAAD,YAAwB;MAAA,IAAhB;QAAEzC;MAAF,CAAgB;MAC9DyC,KAAK,CAACP,iBAAN,GAA0B,WAA1B;MACAO,KAAK,CAACV,kBAAN,GAA2B/B,OAAO,CAACM,MAAnC;IACD,CA9BH,EADqB,CAgCnB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACH;;AA5GgC,CAAD,CAAlC;AA+GA,OAAO,MAAM;EACXoC,QADW;EAEXE,OAFW;EAGXS,SAHW;EAIXiB,YAJW;EAKXW,UALW;EAMXzC;AANW,IAOTb,cAAc,CAACuD,OAPZ;AAUP,eAAevD,cAAc,CAACwD,OAA9B"},"metadata":{},"sourceType":"module"}