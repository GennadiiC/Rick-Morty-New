{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const getSpeciesAsync = createAsyncThunk('displaySpecies/fetchSpecies', async payload => {\n  const response = await fetch(`https://rickandmortyapi.com/api/character/?page=${payload.page}&${payload.filter}=${payload.name}`);\n  let result = response.json();\n  return result;\n});\nconst rickMortySlice = createSlice({\n  name: 'rickMorty',\n  initialState: {\n    page: 1,\n    filter: '',\n    name: '',\n    users: [],\n    displaySpecies: null,\n    filteredFetchingStatus: 'idle',\n    error: null\n  },\n  reducers: {\n    setError: (state, action) => {\n      state.error = action.payload;\n    },\n    setFilter: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.filter = payload.filter;\n      state.name = payload.name;\n    },\n    flipPage: (state, action) => {\n      state.page = state.page += action.payload;\n    },\n    addUser: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      const user = {\n        isLogged: payload.isLogged,\n        name: payload.userName,\n        userID: payload.userID,\n        userEmail: payload.userEmail,\n        userPicture: payload.userPicture,\n        likedCharacters: []\n      };\n      state.users.push(user);\n    },\n    likedChar: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      const char = {\n        id: payload.id,\n        name: payload.name,\n        image: payload.image,\n        species: payload.species,\n        gender: payload.gender,\n        location: payload.location,\n        status: payload.status,\n        episode: payload.episode,\n        created: payload.created,\n        episodes: payload.episodes,\n        title: payload.title,\n        series: payload.series\n      };\n      let user = state.users.find(usr => usr.isLogged === true);\n      let eqID = user.likedCharacters.find(chr => chr.id === payload.id);\n\n      if (!eqID) {\n        user.likedCharacters.push(char);\n      }\n    },\n    disLikedChar: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      let user = state.users.find(usr => usr.isLogged === true);\n      user.likedCharacters = user.likedCharacters.filter(char => char.id !== payload.charID);\n    },\n    logOut: (state, action) => {\n      let user = state.users.find(usr => usr.isLogged === true);\n      user.isLogged = false;\n    }\n  },\n\n  extraReducers(builder) {\n    builder.addCase(getSpeciesAsync.pending, (state, action) => {\n      state.filteredFetchingStatus = 'loading';\n    }).addCase(getSpeciesAsync.fulfilled, (state, action) => {\n      state.filteredFetchingStatus = 'succeeded';\n      state.displaySpecies = action.payload;\n    }).addCase(getSpeciesAsync.rejected, (state, action) => {\n      state.filteredFetchingStatus = 'failed';\n      state.error = action.error.message;\n    });\n  }\n\n});\nexport const {\n  flipPage,\n  addUser,\n  likedChar,\n  disLikedChar,\n  filterChar,\n  setFilter\n} = rickMortySlice.actions;\nexport default rickMortySlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getSpeciesAsync","payload","response","fetch","page","filter","name","result","json","rickMortySlice","initialState","users","displaySpecies","filteredFetchingStatus","error","reducers","setError","state","action","setFilter","flipPage","addUser","user","isLogged","userName","userID","userEmail","userPicture","likedCharacters","push","likedChar","char","id","image","species","gender","location","status","episode","created","episodes","title","series","find","usr","eqID","chr","disLikedChar","charID","logOut","extraReducers","builder","addCase","pending","fulfilled","rejected","message","filterChar","actions","reducer"],"sources":["/Users/g/Documents/myCodeProjects/rick-morty-new/src/redux/rickMortySlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const getSpeciesAsync = createAsyncThunk(\n  'displaySpecies/fetchSpecies', \n  async (payload) => {\n      const response = await fetch(\n        `https://rickandmortyapi.com/api/character/?page=${payload.page}&${payload.filter}=${payload.name}`\n      )\n        \n      let result = response.json()\n      return result\n  }\n)\n\nconst rickMortySlice = createSlice({\n  name: 'rickMorty',\n  initialState: {\n    page: 1,\n    filter: '',\n    name: '',\n    users: [],\n    displaySpecies: null,\n    filteredFetchingStatus: 'idle',\n    error: null\n  },\n  reducers: {\n    setError: (state, action) => {\n      state.error = action.payload\n    },\n    setFilter: (state, { payload }) => {\n      state.filter = payload.filter\n      state.name = payload.name\n    },\n    flipPage: (state, action) => {\n      state.page = state.page += action.payload\n    },\n    addUser: (state, { payload }) => {\n      const user = {\n        isLogged: payload.isLogged,\n        name: payload.userName,\n        userID: payload.userID,\n        userEmail: payload.userEmail,\n        userPicture: payload.userPicture,\n        likedCharacters: []\n      }\n      state.users.push(user)\n    },\n    likedChar: (state, { payload }) => {\n      const char = { \n        id: payload.id,\n        name: payload.name, \n        image: payload.image,\n        species: payload.species,\n        gender: payload.gender,\n        location: payload.location, \n        status: payload.status,\n        episode: payload.episode,\n        created: payload.created,  \n        episodes: payload.episodes,\n        title: payload.title,\n        series: payload.series\n      }\n      let user = state.users.find(usr => usr.isLogged === true)\n      let eqID = user.likedCharacters.find(chr => chr.id === payload.id)\n      if (!eqID) {\n        user.likedCharacters.push(char)\n      }\n    \n    },\n    disLikedChar: (state, {payload}) => {\n      let user = state.users.find(usr => usr.isLogged === true)\n      user.likedCharacters = user.likedCharacters.filter(char => char.id !== payload.charID)\n    },\n    logOut: (state, action) => {\n      let user = state.users.find(usr => usr.isLogged === true)\n      user.isLogged = false\n    }\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(getSpeciesAsync.pending, (state, action) => {\n        state.filteredFetchingStatus = 'loading'\n      })\n      .addCase(getSpeciesAsync.fulfilled, (state, action) => {\n        state.filteredFetchingStatus = 'succeeded'\n        state.displaySpecies = action.payload\n      })\n      .addCase(getSpeciesAsync.rejected, (state, action) => {\n        state.filteredFetchingStatus = 'failed'\n        state.error = action.error.message\n      })\n  }\n})\n\nexport const { \n  flipPage, \n  addUser, \n  likedChar, \n  disLikedChar, \n  filterChar,\n  setFilter,\n} = rickMortySlice.actions;\n\n\nexport default rickMortySlice.reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,eAAe,GAAGD,gBAAgB,CAC7C,6BAD6C,EAE7C,MAAOE,OAAP,IAAmB;EACf,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,mDAAkDF,OAAO,CAACG,IAAK,IAAGH,OAAO,CAACI,MAAO,IAAGJ,OAAO,CAACK,IAAK,EADxE,CAA5B;EAIA,IAAIC,MAAM,GAAGL,QAAQ,CAACM,IAAT,EAAb;EACA,OAAOD,MAAP;AACH,CAT4C,CAAxC;AAYP,MAAME,cAAc,GAAGX,WAAW,CAAC;EACjCQ,IAAI,EAAE,WAD2B;EAEjCI,YAAY,EAAE;IACZN,IAAI,EAAE,CADM;IAEZC,MAAM,EAAE,EAFI;IAGZC,IAAI,EAAE,EAHM;IAIZK,KAAK,EAAE,EAJK;IAKZC,cAAc,EAAE,IALJ;IAMZC,sBAAsB,EAAE,MANZ;IAOZC,KAAK,EAAE;EAPK,CAFmB;EAWjCC,QAAQ,EAAE;IACRC,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC3BD,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACjB,OAArB;IACD,CAHO;IAIRkB,SAAS,EAAE,CAACF,KAAD,WAAwB;MAAA,IAAhB;QAAEhB;MAAF,CAAgB;MACjCgB,KAAK,CAACZ,MAAN,GAAeJ,OAAO,CAACI,MAAvB;MACAY,KAAK,CAACX,IAAN,GAAaL,OAAO,CAACK,IAArB;IACD,CAPO;IAQRc,QAAQ,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;MAC3BD,KAAK,CAACb,IAAN,GAAaa,KAAK,CAACb,IAAN,IAAcc,MAAM,CAACjB,OAAlC;IACD,CAVO;IAWRoB,OAAO,EAAE,CAACJ,KAAD,YAAwB;MAAA,IAAhB;QAAEhB;MAAF,CAAgB;MAC/B,MAAMqB,IAAI,GAAG;QACXC,QAAQ,EAAEtB,OAAO,CAACsB,QADP;QAEXjB,IAAI,EAAEL,OAAO,CAACuB,QAFH;QAGXC,MAAM,EAAExB,OAAO,CAACwB,MAHL;QAIXC,SAAS,EAAEzB,OAAO,CAACyB,SAJR;QAKXC,WAAW,EAAE1B,OAAO,CAAC0B,WALV;QAMXC,eAAe,EAAE;MANN,CAAb;MAQAX,KAAK,CAACN,KAAN,CAAYkB,IAAZ,CAAiBP,IAAjB;IACD,CArBO;IAsBRQ,SAAS,EAAE,CAACb,KAAD,YAAwB;MAAA,IAAhB;QAAEhB;MAAF,CAAgB;MACjC,MAAM8B,IAAI,GAAG;QACXC,EAAE,EAAE/B,OAAO,CAAC+B,EADD;QAEX1B,IAAI,EAAEL,OAAO,CAACK,IAFH;QAGX2B,KAAK,EAAEhC,OAAO,CAACgC,KAHJ;QAIXC,OAAO,EAAEjC,OAAO,CAACiC,OAJN;QAKXC,MAAM,EAAElC,OAAO,CAACkC,MALL;QAMXC,QAAQ,EAAEnC,OAAO,CAACmC,QANP;QAOXC,MAAM,EAAEpC,OAAO,CAACoC,MAPL;QAQXC,OAAO,EAAErC,OAAO,CAACqC,OARN;QASXC,OAAO,EAAEtC,OAAO,CAACsC,OATN;QAUXC,QAAQ,EAAEvC,OAAO,CAACuC,QAVP;QAWXC,KAAK,EAAExC,OAAO,CAACwC,KAXJ;QAYXC,MAAM,EAAEzC,OAAO,CAACyC;MAZL,CAAb;MAcA,IAAIpB,IAAI,GAAGL,KAAK,CAACN,KAAN,CAAYgC,IAAZ,CAAiBC,GAAG,IAAIA,GAAG,CAACrB,QAAJ,KAAiB,IAAzC,CAAX;MACA,IAAIsB,IAAI,GAAGvB,IAAI,CAACM,eAAL,CAAqBe,IAArB,CAA0BG,GAAG,IAAIA,GAAG,CAACd,EAAJ,KAAW/B,OAAO,CAAC+B,EAApD,CAAX;;MACA,IAAI,CAACa,IAAL,EAAW;QACTvB,IAAI,CAACM,eAAL,CAAqBC,IAArB,CAA0BE,IAA1B;MACD;IAEF,CA3CO;IA4CRgB,YAAY,EAAE,CAAC9B,KAAD,YAAsB;MAAA,IAAd;QAAChB;MAAD,CAAc;MAClC,IAAIqB,IAAI,GAAGL,KAAK,CAACN,KAAN,CAAYgC,IAAZ,CAAiBC,GAAG,IAAIA,GAAG,CAACrB,QAAJ,KAAiB,IAAzC,CAAX;MACAD,IAAI,CAACM,eAAL,GAAuBN,IAAI,CAACM,eAAL,CAAqBvB,MAArB,CAA4B0B,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAY/B,OAAO,CAAC+C,MAAxD,CAAvB;IACD,CA/CO;IAgDRC,MAAM,EAAE,CAAChC,KAAD,EAAQC,MAAR,KAAmB;MACzB,IAAII,IAAI,GAAGL,KAAK,CAACN,KAAN,CAAYgC,IAAZ,CAAiBC,GAAG,IAAIA,GAAG,CAACrB,QAAJ,KAAiB,IAAzC,CAAX;MACAD,IAAI,CAACC,QAAL,GAAgB,KAAhB;IACD;EAnDO,CAXuB;;EAgEjC2B,aAAa,CAACC,OAAD,EAAU;IACrBA,OAAO,CACJC,OADH,CACWpD,eAAe,CAACqD,OAD3B,EACoC,CAACpC,KAAD,EAAQC,MAAR,KAAmB;MACnDD,KAAK,CAACJ,sBAAN,GAA+B,SAA/B;IACD,CAHH,EAIGuC,OAJH,CAIWpD,eAAe,CAACsD,SAJ3B,EAIsC,CAACrC,KAAD,EAAQC,MAAR,KAAmB;MACrDD,KAAK,CAACJ,sBAAN,GAA+B,WAA/B;MACAI,KAAK,CAACL,cAAN,GAAuBM,MAAM,CAACjB,OAA9B;IACD,CAPH,EAQGmD,OARH,CAQWpD,eAAe,CAACuD,QAR3B,EAQqC,CAACtC,KAAD,EAAQC,MAAR,KAAmB;MACpDD,KAAK,CAACJ,sBAAN,GAA+B,QAA/B;MACAI,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACJ,KAAP,CAAa0C,OAA3B;IACD,CAXH;EAYD;;AA7EgC,CAAD,CAAlC;AAgFA,OAAO,MAAM;EACXpC,QADW;EAEXC,OAFW;EAGXS,SAHW;EAIXiB,YAJW;EAKXU,UALW;EAMXtC;AANW,IAOTV,cAAc,CAACiD,OAPZ;AAUP,eAAejD,cAAc,CAACkD,OAA9B"},"metadata":{},"sourceType":"module"}