{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const rickMortyApi = createApi({\n  reducerPath: 'rickMortyApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://rickandmortyapi.com/api/'\n  }),\n  endpoints: build => ({\n    getCharacterByName: build.query({\n      query: query => `character/?name=${query}`\n    }),\n    getEpisodeForCharacter: build.query({\n      query: query => `episode/${query}`\n    }),\n    getAllCharactersByPage: build.query({\n      query: query => `character/?page=${query}`\n    }),\n    getAllCharacters: build.query({\n      query: () => 'character'\n    }),\n    getAllNames: build.query({\n      queryFn: async (arg, queryApi, extraOptions, baseQuery) => {\n        const pages = new Array(42).fill().map((p, i) => p = i + 1);\n        const results = await Promise.all(pages.map(page => baseQuery(`https://rickandmortyapi.com/api/character/?page=${page}`)));\n        const merged = [].concat(...results.map(result => result.data));\n        const errors = [].concat(...results.filter(result => result.error !== null).map(result => result.error)); // const usefulData = [].concat.apply([], merged.map(res => res.results))\n\n        const usefulData = merged.map(res => res.results).flat();\n\n        if (errors.length > 0 && merged.includes(undefined)) {\n          return {\n            error: 'Bratuha, you fucked up big time'\n          };\n        }\n\n        return {\n          data: usefulData,\n          isSuccess: usefulData !== undefined\n        };\n      }\n    })\n  })\n});\nexport const {\n  useGetCharacterByNameQuery,\n  useGetEpisodeForCharacterQuery,\n  useGetAllCharactersByPageQuery,\n  useGetAllCharactersQuery,\n  useGetAllNamesQuery\n} = rickMortyApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","rickMortyApi","reducerPath","baseQuery","baseUrl","endpoints","build","getCharacterByName","query","getEpisodeForCharacter","getAllCharactersByPage","getAllCharacters","getAllNames","queryFn","arg","queryApi","extraOptions","pages","Array","fill","map","p","i","results","Promise","all","page","merged","concat","result","data","errors","filter","error","usefulData","res","flat","length","includes","undefined","isSuccess","useGetCharacterByNameQuery","useGetEpisodeForCharacterQuery","useGetAllCharactersByPageQuery","useGetAllCharactersQuery","useGetAllNamesQuery"],"sources":["/Users/g/Documents/myCodeProjects/rick-morty/src/redux/rickMortyApi.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport const rickMortyApi = createApi({\n  reducerPath: 'rickMortyApi',\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://rickandmortyapi.com/api/' }),\n  endpoints: (build) => ({\n    getCharacterByName: build.query({\n      query: (query) => `character/?name=${query}`,\n    }),\n    getEpisodeForCharacter: build.query({\n      query: (query) => `episode/${query}`\n    }),\n    getAllCharactersByPage: build.query({\n      query: (query) => `character/?page=${query}`\n    }),\n    getAllCharacters: build.query({\n      query: () => 'character'\n    }),\n    getAllNames: build.query({\n      queryFn: async (arg, queryApi, extraOptions, baseQuery) => {\n        const pages = new Array(42)\n          .fill()\n          .map((p, i) => p = i + 1)\n        const results = await Promise.all(\n          pages.map(page => \n            baseQuery(`https://rickandmortyapi.com/api/character/?page=${page}`)\n          )\n        )\n        const merged = [].concat(...results.map(result => result.data))\n        const errors = [].concat(...results.filter(result => result.error !== null).map(result => result.error))\n        // const usefulData = [].concat.apply([], merged.map(res => res.results))\n        const usefulData = merged.map(res => res.results).flat()\n\n        if (errors.length > 0 && merged.includes(undefined)) {\n          return { error: 'Bratuha, you fucked up big time' }\n        }\n\n        return { data: usefulData, isSuccess: usefulData !== undefined }\n      }\n    })\n  }),\n})\n\nexport const { \n  useGetCharacterByNameQuery, \n  useGetEpisodeForCharacterQuery, \n  useGetAllCharactersByPageQuery ,\n  useGetAllCharactersQuery,\n  useGetAllNamesQuery\n} = rickMortyApi;"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AAEA,OAAO,MAAMC,YAAY,GAAGF,SAAS,CAAC;EACpCG,WAAW,EAAE,cADuB;EAEpCC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE;EAAX,CAAD,CAFW;EAGpCC,SAAS,EAAGC,KAAD,KAAY;IACrBC,kBAAkB,EAAED,KAAK,CAACE,KAAN,CAAY;MAC9BA,KAAK,EAAGA,KAAD,IAAY,mBAAkBA,KAAM;IADb,CAAZ,CADC;IAIrBC,sBAAsB,EAAEH,KAAK,CAACE,KAAN,CAAY;MAClCA,KAAK,EAAGA,KAAD,IAAY,WAAUA,KAAM;IADD,CAAZ,CAJH;IAOrBE,sBAAsB,EAAEJ,KAAK,CAACE,KAAN,CAAY;MAClCA,KAAK,EAAGA,KAAD,IAAY,mBAAkBA,KAAM;IADT,CAAZ,CAPH;IAUrBG,gBAAgB,EAAEL,KAAK,CAACE,KAAN,CAAY;MAC5BA,KAAK,EAAE,MAAM;IADe,CAAZ,CAVG;IAarBI,WAAW,EAAEN,KAAK,CAACE,KAAN,CAAY;MACvBK,OAAO,EAAE,OAAOC,GAAP,EAAYC,QAAZ,EAAsBC,YAAtB,EAAoCb,SAApC,KAAkD;QACzD,MAAMc,KAAK,GAAG,IAAIC,KAAJ,CAAU,EAAV,EACXC,IADW,GAEXC,GAFW,CAEP,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAC,GAAG,CAFX,CAAd;QAGA,MAAMC,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAR,CACpBR,KAAK,CAACG,GAAN,CAAUM,IAAI,IACZvB,SAAS,CAAE,mDAAkDuB,IAAK,EAAzD,CADX,CADoB,CAAtB;QAKA,MAAMC,MAAM,GAAG,GAAGC,MAAH,CAAU,GAAGL,OAAO,CAACH,GAAR,CAAYS,MAAM,IAAIA,MAAM,CAACC,IAA7B,CAAb,CAAf;QACA,MAAMC,MAAM,GAAG,GAAGH,MAAH,CAAU,GAAGL,OAAO,CAACS,MAAR,CAAeH,MAAM,IAAIA,MAAM,CAACI,KAAP,KAAiB,IAA1C,EAAgDb,GAAhD,CAAoDS,MAAM,IAAIA,MAAM,CAACI,KAArE,CAAb,CAAf,CAVyD,CAWzD;;QACA,MAAMC,UAAU,GAAGP,MAAM,CAACP,GAAP,CAAWe,GAAG,IAAIA,GAAG,CAACZ,OAAtB,EAA+Ba,IAA/B,EAAnB;;QAEA,IAAIL,MAAM,CAACM,MAAP,GAAgB,CAAhB,IAAqBV,MAAM,CAACW,QAAP,CAAgBC,SAAhB,CAAzB,EAAqD;UACnD,OAAO;YAAEN,KAAK,EAAE;UAAT,CAAP;QACD;;QAED,OAAO;UAAEH,IAAI,EAAEI,UAAR;UAAoBM,SAAS,EAAEN,UAAU,KAAKK;QAA9C,CAAP;MACD;IApBsB,CAAZ;EAbQ,CAAZ;AAHyB,CAAD,CAA9B;AAyCP,OAAO,MAAM;EACXE,0BADW;EAEXC,8BAFW;EAGXC,8BAHW;EAIXC,wBAJW;EAKXC;AALW,IAMT5C,YANG"},"metadata":{},"sourceType":"module"}