{"ast":null,"code":"var _jsxFileName = \"/Users/g/Documents/myCodeProjects/rick-morty-new/src/components/CharacterList/FilterForm.js\",\n    _s = $RefreshSig$();\n\nimport { useGetAllCharactersQuery } from \"../../redux/rickMortyApi\";\nimport { setFilter, getAllCharactersAsync } from \"../../redux/rickMortySlice\";\nimport { useForm } from \"react-hook-form\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FilterForm = _ref => {\n  _s();\n\n  let {\n    filter\n  } = _ref;\n  // const { data, isSuccess } = useGetAllCharactersQuery()\n  const {\n    displayAllCharacters,\n    allCharactersStatus,\n    allCharactersError\n  } = useSelector(state => state.rickMorty);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getAllCharactersAsync());\n  }, [dispatch]);\n\n  const clearDuplicates = array => {\n    let sorted = new Set(array);\n    const sortedArr = [];\n\n    for (let value of sorted) sortedArr.push(value);\n\n    return sortedArr;\n  };\n\n  const {\n    register,\n    handleSubmit,\n    reset\n  } = useForm();\n\n  const onSubmit = data => {\n    dispatch(setFilter({\n      filter,\n      name: data[filter]\n    }));\n    reset();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"input-group input-group-sm my-4\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [console.log(displayAllCharacters), /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"form-control\",\n      ...register(filter),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        label: `select ${filter}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), allCharactersStatus === 'succeeded' && displayAllCharacters ? clearDuplicates(displayAllCharacters.map(item => item[filter])).map((item, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n        label: item,\n        children: item\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }, this)) : // allCharactersStatus === 'failed' && allCharactersError ?\n      // <option label='error'>Oops, {allCharactersError}</option> :\n      null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      type: \"submit\",\n      children: filter[0].toUpperCase() + filter.slice(1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FilterForm, \"7/Th+0Bu3Ya3HFMy//ihV5rUlNg=\", false, function () {\n  return [useSelector, useDispatch, useForm];\n});\n\n_c = FilterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterForm\");","map":{"version":3,"names":["useGetAllCharactersQuery","setFilter","getAllCharactersAsync","useForm","useEffect","useDispatch","useSelector","FilterForm","filter","displayAllCharacters","allCharactersStatus","allCharactersError","state","rickMorty","dispatch","clearDuplicates","array","sorted","Set","sortedArr","value","push","register","handleSubmit","reset","onSubmit","data","name","console","log","map","item","i","toUpperCase","slice"],"sources":["/Users/g/Documents/myCodeProjects/rick-morty-new/src/components/CharacterList/FilterForm.js"],"sourcesContent":["import { useGetAllCharactersQuery } from \"../../redux/rickMortyApi\"\nimport { setFilter, getAllCharactersAsync } from \"../../redux/rickMortySlice\"\nimport { useForm } from \"react-hook-form\"\nimport { useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\n\nexport const FilterForm = ({ filter }) => {\n\n  // const { data, isSuccess } = useGetAllCharactersQuery()\n\n  const {\n    displayAllCharacters,\n    allCharactersStatus,\n    allCharactersError\n  } = useSelector(state => state.rickMorty)\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(getAllCharactersAsync())\n  }, [dispatch])\n\n  const clearDuplicates = (array) => {\n    let sorted = new Set(array)\n    const sortedArr = []\n    for (let value of sorted) sortedArr.push(value)\n    return sortedArr\n  }\n\n  const {\n    register, \n    handleSubmit,\n    reset\n  } = useForm()\n\n  const onSubmit = (data) => {\n    dispatch(setFilter({ filter, name: data[filter] }))\n    reset()\n  }\n\n\n  return (\n    <form className=\"input-group input-group-sm my-4\" onSubmit={handleSubmit(onSubmit)}>\n      {console.log(displayAllCharacters)}\n      <select className=\"form-control\" {...register(filter)} >\n        <option label={`select ${filter}`}></option>\n        {/* {\n          isSuccess ?\n          clearDuplicates(data.map(item => item[filter]))\n            .map((item, i) => \n              <option key={i} label={item}>{item}</option>\n            ) :\n            null\n        } */}\n        {\n          allCharactersStatus === 'succeeded' && displayAllCharacters ?\n          clearDuplicates(displayAllCharacters.map(item => item[filter]))\n            .map((item, i) => \n              <option key={i} label={item}>{item}</option>\n            ) :\n          // allCharactersStatus === 'failed' && allCharactersError ?\n          // <option label='error'>Oops, {allCharactersError}</option> :\n          null\n        }\n      </select>\n      <button\n        className=\"btn\" \n        type='submit'\n      >\n        {filter[0].toUpperCase() + filter.slice(1)}\n      </button>\n    </form>\n  )\n}"],"mappings":";;;AAAA,SAASA,wBAAT,QAAyC,0BAAzC;AACA,SAASC,SAAT,EAAoBC,qBAApB,QAAiD,4BAAjD;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAEA,OAAO,MAAMC,UAAU,GAAG,QAAgB;EAAA;;EAAA,IAAf;IAAEC;EAAF,CAAe;EAExC;EAEA,MAAM;IACJC,oBADI;IAEJC,mBAFI;IAGJC;EAHI,IAIFL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,SAAhB,CAJf;EAMA,MAAMC,QAAQ,GAAGT,WAAW,EAA5B;EAEAD,SAAS,CAAC,MAAM;IACdU,QAAQ,CAACZ,qBAAqB,EAAtB,CAAR;EACD,CAFQ,EAEN,CAACY,QAAD,CAFM,CAAT;;EAIA,MAAMC,eAAe,GAAIC,KAAD,IAAW;IACjC,IAAIC,MAAM,GAAG,IAAIC,GAAJ,CAAQF,KAAR,CAAb;IACA,MAAMG,SAAS,GAAG,EAAlB;;IACA,KAAK,IAAIC,KAAT,IAAkBH,MAAlB,EAA0BE,SAAS,CAACE,IAAV,CAAeD,KAAf;;IAC1B,OAAOD,SAAP;EACD,CALD;;EAOA,MAAM;IACJG,QADI;IAEJC,YAFI;IAGJC;EAHI,IAIFrB,OAAO,EAJX;;EAMA,MAAMsB,QAAQ,GAAIC,IAAD,IAAU;IACzBZ,QAAQ,CAACb,SAAS,CAAC;MAAEO,MAAF;MAAUmB,IAAI,EAAED,IAAI,CAAClB,MAAD;IAApB,CAAD,CAAV,CAAR;IACAgB,KAAK;EACN,CAHD;;EAMA,oBACE;IAAM,SAAS,EAAC,iCAAhB;IAAkD,QAAQ,EAAED,YAAY,CAACE,QAAD,CAAxE;IAAA,WACGG,OAAO,CAACC,GAAR,CAAYpB,oBAAZ,CADH,eAEE;MAAQ,SAAS,EAAC,cAAlB;MAAA,GAAqCa,QAAQ,CAACd,MAAD,CAA7C;MAAA,wBACE;QAAQ,KAAK,EAAG,UAASA,MAAO;MAAhC;QAAA;QAAA;QAAA;MAAA,QADF,EAWIE,mBAAmB,KAAK,WAAxB,IAAuCD,oBAAvC,GACAM,eAAe,CAACN,oBAAoB,CAACqB,GAArB,CAAyBC,IAAI,IAAIA,IAAI,CAACvB,MAAD,CAArC,CAAD,CAAf,CACGsB,GADH,CACO,CAACC,IAAD,EAAOC,CAAP,kBACH;QAAgB,KAAK,EAAED,IAAvB;QAAA,UAA8BA;MAA9B,GAAaC,CAAb;QAAA;QAAA;QAAA;MAAA,QAFJ,CADA,GAKA;MACA;MACA,IAlBJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,eAuBE;MACE,SAAS,EAAC,KADZ;MAEE,IAAI,EAAC,QAFP;MAAA,UAIGxB,MAAM,CAAC,CAAD,CAAN,CAAUyB,WAAV,KAA0BzB,MAAM,CAAC0B,KAAP,CAAa,CAAb;IAJ7B;MAAA;MAAA;MAAA;IAAA,QAvBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAgCD,CAnEM;;GAAM3B,U;UAQPD,W,EAEaD,W,EAiBbF,O;;;KA3BOI,U"},"metadata":{},"sourceType":"module"}